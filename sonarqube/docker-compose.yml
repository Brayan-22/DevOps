services:
  sonar:
    image: sonarqube:lts-community
    container_name: sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"
    env_file:
      - .env
    labels:
        - "traefik.enable=true"
        - "traefik.docker.network=reverse-proxy"
        - "traefik.http.routers.sonarqube.entrypoints=websecure"
        - "traefik.http.routers.sonarqube.rule=Host(`sonarqube.${DOMAIN}`)"
        - "traefik.http.routers.sonarqube.service=sonarqube"
        - "traefik.http.services.sonarqube.loadbalancer.server.port=9000"
        - "traefik.http.routers.sonarqube.tls=true"
        - "traefik.http.routers.sonarqube.tls.certresolver=cloudflare"
        - "traefik.http.routers.sonarqube.tls.domains[0].main=${DOMAIN}"
        - "traefik.http.routers.sonarqube.tls.domains[0].sans=*.${DOMAIN}"
    networks:
      - default
      - reverse-proxy
    volumes:
      - data:/opt/sonarqube/data
      - extensions:/opt/sonarqube/extensions
    depends_on:
      - database
  database:
    image: postgres:15.4
    container_name: postgres-sonarqube
    restart: unless-stopped
    environment:
      - POSTGRES_USER_FILE=/run/secrets/user
      - POSTGRES_PASSWORD_FILE=/run/secrets/password
      - POSTGRES_DB_FILE=/run/secrets/database
    networks:
      - default
    volumes:
      - postgres:/var/lib/postgresql/data
    secrets:
      - database
      - user
      - password
volumes:
    data:
    extensions:
    postgres:
secrets:
    database:
        file: db_name.priv
    user:
        file: db_user.priv
    password:
        file: db_pass.priv
networks:
    reverse-proxy:
        external: true